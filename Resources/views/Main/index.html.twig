{% block main %}
<script type="text/javascript">
$(document).ready(function () {
    "use strict";
    function getId() {
        return "{{id}}";
    };
    function getWrapper() {
        return  "#{{id}}_wrapper";
    };
    var s = getWrapper();
    var multiple = {% if multiple %} true
    {% else %}
    false {% endif %};
    var multiple_rawhtml = '';
    {% if multiple %}
    var multiple_rawhtml = '\
            <div class="form-group dataTables_multiple">\
                <label for="dataTables[select]">{{ 'Execute' }}</label>\
                <select name="dataTables[select]" class="form-control">\
                    {% for key,item in multiple %}\
                    <option value="{{ path(item.route) }}">{{item.title}}</option>\
                    {% endfor %}\
                </select>\
                <button class="btn btn-default btn-datatable-multiple" type="button">OK</button>\
            </div>';
    {% endif %}
    var $js_conf = {{ js_conf | raw }};
    var $js = {};
    for (var key in $js_conf) {
        if ($js_conf.hasOwnProperty(key)) {
            $js[key] = $js_conf[key];
        }
    }
    var $options = {{ js | raw }};
    var $opts = {};
    for (var key in $options) {
        if ($options.hasOwnProperty(key)) {
            $opts[key] = $options[key];
            try {
                var type = typeof (eval(' tmp = ' + $options[key] + ' ; '));
                if (type == 'object' || type == 'function') {
                    eval(' $opts["' + key + '"] = ' + $options[key] + ' ; ');
                }
            } catch (e) {
            }
        }
    }
    $options = $opts;
    var $aoColumnDefs = new Array();
    {% if multiple %}
    $aoColumnDefs.push({ 'bSortable': false, 'aTargets': [ 0 ] });
    {% endif %}
    {% if action and not action_twig %}
    $aoColumnDefs.push({
        "fnRender": function (oObj) {
            var $edit_url = strtr(
                    "{{ path(edit_route , { 'id': "xx" }) }}",
                    { "xx": oObj.aData[{{fields|length}}-1] }
            );
            var $link_edit = "<a  style='float:right; margin-right:10px' class='dialog' title='edit'";
            $link_edit += "href='" + $edit_url + "'>";
            $link_edit += "{{ 'ali.common.edit'|trans()}}</a>";
            var $delete_url = strtr(
                    "{{ path(delete_route, { 'id': "xx" }) }}",
                    { "xx": oObj.aData[{{fields|length}}-1] }
            );
            var $link_delete = "<form style='float:right' class='form' action='" + $delete_url + "' method='post'>";
            $link_delete += strtr(
                    '{{ form_widget(delete_form) }}',
                    { "_id_": oObj.aData[{{fields|length}}-1] }
            );
            $link_delete += "<a class='button-delete' href='#' type='submit'>{{ 'ali.common.delete'|trans() }}</a>";
            $link_delete += " </form>";
            var $out = $link_delete + " " + $link_edit;
            if (oObj.aData[{{fields|length}}-1] == null) {
                $out = "<div style='float:right'>{{ 'ali.common.no_action'|trans() }}</div>";
            }
            return $out
        },
        "aTargets": [ multiple ? {{fields|length}} : ({{fields|length}} -1)  ]
    });
    {% endif %}
    var $defaults = {
        "bJQueryUI": false,
        "sDom": "<'row'<'col-lg-6'f><'col-lg-6'l>r>t<'row'<'col-lg-6'i><'col-lg-6'p>>",
        "sPaginationType": "bootstrap",
        "aLengthMenu": [
            [5, 10, 25, 50, -1],
            [5, 10, 25, 50, "All"]
        ],
        "iDisplayLength": 10,
        "bServerSide": true,
        "bProcessing": true,
        "sAjaxSource": null,
        "bPaginate": true,
        {% if sort %}
        "aaSorting": [
            [ {{sort[0]}}, "{{sort[1]}}" ]
        ],
        {% endif %}
        "bLengthChange": true,
        "aoColumnDefs": $aoColumnDefs,
        "fnDrawCallback": function (oSettings) {
            var s = getWrapper();
            if (multiple && $('.dataTables_multiple', $(s)).length == 0) {
                $(s + ' .dataTables_length').closest('.row').find('>:first-child').prepend(multiple_rawhtml);
            }
        },
        "bSort": true,
        "bFilter": true,
        "oLanguage": {
            "sProcessing": '{{ 'ali.common.sProcessing' | trans() }}',
            "sLengthMenu": '{{ 'ali.common.sLengthMenu' | trans() }}',
            "sZeroRecords": '{{ 'ali.common.sZeroRecords' | trans() }}',
            "sInfo": '{{ 'ali.common.sInfo' | trans() }}',
            "sInfoEmpty": '{{ 'ali.common.sInfoEmpty' | trans() }}',
            "sInfoFiltered": '{{ 'ali.common.sInfoFiltered' | trans() }}',
            "sInfoPostFix": '{{ 'ali.common.sInfoPostFix' | trans() }}',
            "sSearch": '{{ 'ali.common.sSearch' | trans() }}',
            "sLoadingRecords": '{{ 'ali.common.sLoadingRecords' | trans() }}',
            "sUrl": "",
            "oPaginate": {
                "sFirst": '{{ 'ali.common.sFirst' | trans() }}',
                "sPrevious": '{{ 'ali.common.sPrevious' | trans() }}',
                "sNext": '{{ 'ali.common.sNext' | trans() }}',
                "sLast": '{{ 'ali.common.sLast' | trans() }}'
            }
        },
        "oSearch": {"sSearch": ""},
        "bAutoWidth": false
    };
    $.extend($defaults, $js);
    $.extend($defaults, $options);
    $.extend($.fn.dataTableExt.oStdClasses, {
        "sWrapper": "dataTables_wrapper form-inline",
        "sPaging": "dataTables_paginate paging_"
    });
    /* API method to get paging information */
    $.fn.dataTableExt.oApi.fnPagingInfo = function (oSettings) {
        return {
            "iStart": oSettings._iDisplayStart,
            "iEnd": oSettings.fnDisplayEnd(),
            "iLength": oSettings._iDisplayLength,
            "iTotal": oSettings.fnRecordsTotal(),
            "iFilteredTotal": oSettings.fnRecordsDisplay(),
            "iPage": oSettings._iDisplayLength === -1 ?
                    0 : Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength),
            "iTotalPages": oSettings._iDisplayLength === -1 ?
                    0 : Math.ceil(oSettings.fnRecordsDisplay() / oSettings._iDisplayLength)
        };
    };
    /* Bootstrap style pagination control */
    $.extend($.fn.dataTableExt.oPagination, {
        "bootstrap": {
            "fnInit": function (oSettings, nPaging, fnDraw) {
                var oLang = oSettings.oLanguage.oPaginate;
                var fnClickHandler = function (e) {
                    e.preventDefault();
                    if (oSettings.oApi._fnPageChange(oSettings, e.data.action)) {
                        fnDraw(oSettings);
                    }
                };
                $(nPaging).append(
                        '<ul class="pagination">' +
                                '<li class="prev disabled"><a href="#">&larr; ' + oLang.sPrevious + '</a></li>' +
                                '<li class="next disabled"><a href="#">' + oLang.sNext + ' &rarr; </a></li>' +
                                '</ul>'
                );
                var els = $('a', nPaging);
                $(els[0]).bind('click.DT', { action: "previous" }, fnClickHandler);
                $(els[1]).bind('click.DT', { action: "next" }, fnClickHandler);
            },
            "fnUpdate": function (oSettings, fnDraw) {
                var iListLength = 5;
                var oPaging = oSettings.oInstance.fnPagingInfo();
                var an = oSettings.aanFeatures.p;
                var i, ien, j, sClass, iStart, iEnd, iHalf = Math.floor(iListLength / 2);
                if (oPaging.iTotalPages < iListLength) {
                    iStart = 1;
                    iEnd = oPaging.iTotalPages;
                }
                else if (oPaging.iPage <= iHalf) {
                    iStart = 1;
                    iEnd = iListLength;
                } else if (oPaging.iPage >= (oPaging.iTotalPages - iHalf)) {
                    iStart = oPaging.iTotalPages - iListLength + 1;
                    iEnd = oPaging.iTotalPages;
                } else {
                    iStart = oPaging.iPage - iHalf + 1;
                    iEnd = iStart + iListLength - 1;
                }
                for (i = 0, ien = an.length; i < ien; i++) {
                    // Remove the middle elements
                    $('li:gt(0)', an[i]).filter(':not(:last)').remove();
                    // Add the new list items and their event handlers
                    for (j = iStart; j <= iEnd; j++) {
                        sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                        $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
                                .insertBefore($('li:last', an[i])[0])
                                .bind('click', function (e) {
                                    e.preventDefault();
                                    oSettings._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
                                    fnDraw(oSettings);
                                });
                    }
                    // Add / remove disabled classes from the static elements
                    if (oPaging.iPage === 0) {
                        $('li:first', an[i]).addClass('disabled');
                    } else {
                        $('li:first', an[i]).removeClass('disabled');
                    }
                    if (oPaging.iPage === oPaging.iTotalPages - 1 || oPaging.iTotalPages === 0) {
                        $('li:last', an[i]).addClass('disabled');
                    } else {
                        $('li:last', an[i]).removeClass('disabled');
                    }
                }
            }
        }
    });
    /*
     * TableTools Bootstrap compatibility
     * Required TableTools 2.1+
     */
    if ($.fn.DataTable.TableTools) {
        // Set the classes that TableTools uses to something suitable for Bootstrap
        $.extend(true, $.fn.DataTable.TableTools.classes, {
            "container": "DTTT btn-group",
            "buttons": {
                "normal": "btn",
                "disabled": "disabled"
            },
            "collection": {
                "container": "DTTT_dropdown dropdown-menu",
                "buttons": {
                    "normal": "",
                    "disabled": "disabled"
                }
            },
            "print": {
                "info": "DTTT_print_info modal"
            },
            "select": {
                "row": "active"
            }
        });

        // Have the collection use a bootstrap compatible dropdown
        $.extend(true, $.fn.DataTable.TableTools.DEFAULTS.oTags, {
            "collection": {
                "container": "ul",
                "button": "li",
                "liner": "a"
            }
        });
    }
    $('#{{id}}').trigger('datatables_init', $defaults);
    var oTable_{{id|split('-')|join('_')}} = $('#{{id}}').dataTable($defaults);
    $(s).on('click', '.button-delete:parent', function (e) {
        if (!confirm('{{ 'ali.common.confirm_delete'|trans()  }}')) {
            return false;
        }
        $(this).parents('form:eq(0)').submit();
    });
    if (multiple === true) {
        var chbox = 'input:checkbox[name="dataTables[actions][]"]';
        var chbox_all = 'input:checkbox[name="datatable_action_all"]';
        $(s).on('click', '.btn-datatable-multiple:not(.search_init)', function (e) {
            if ($('input:focus', $(s)).length > 0) {
                return false;
            }
            e.preventDefault();
            if ($(chbox + ':checked').length > 0) {
                if (!confirm('Are you sure ?')) {
                    return false;
                }
                var form = $(this).parents('form:eq(0)');
                var action = $('select[name="dataTables[select]"]', $(s)).val();
                $.ajax({
                    type: "POST",
                    url: action,
                    data: form.serialize(),
                    success: function (msg) {
                        $('#' + getId()).dataTable().fnDraw();
                        if ($.isFunction($.fn.unblockpage)) {
                            $.unblockpage();
                        }
                    },
                    beforeSend: function () {
                        if ($.isFunction($.fn.blockpage)) {
                            $.blockpage({
                                msg: 'saving data'
                            });
                        }
                    }
                });
            } else {
                alert('You need to select at least one element.');
            }
        });
        $(s).on('click', chbox_all, function (e) {
            if ($(this).is(':checked')) {
                $(chbox, $(s)).attr("checked", false).click();
            } else {
                $(chbox, $(s)).attr("checked", true).click();
            }
        });
    }
    {% if search %}
    $(".dataTables_filter").remove();
    var search_selector = "#{{id}} input[searchable=true]";
    $(search_selector).keypress(function (event) {
        var index = $(this).attr('index');
        var oTable = oTable_{{id|split('-')|join('_')}};
        if (event.keyCode == '13') {
            oTable.fnFilter(
                    this.value,
                    oTable.oApi._fnVisibleToColumnIndex(
                            oTable.fnSettings(),
                            index
                    )
            );
        }
    }).each(function (i) {
        var $this = $(this);
        $this.data('initVal', $this.val());
    }).focus(function () {
        var $this = $(this);
        if ($this.hasClass("search_init")) {
            $this.removeClass("search_init");
            $this.val("");
        }
    }).blur(function (i) {
        var $this = $(this);
        if ($this.val() == "") {
            $this.addClass("search_init");
            $this.val($this.data('initVal'));
        }
    });
    {% endif %}
});
</script>
{% if multiple %}
<form name="frm-{{id}}">
{% endif %}
    <div class="table-responsive">
        <table class="display table table-striped" id="{{ id }}">
            <thead>
            <tr>
                {% if multiple %}
                    <th width="1%"><input type="checkbox" name="datatable_action_all"/></th>
                {% endif %}
                {% for label,key in fields %}
                    {% if label != '_identifier_' %}
                        <th>{{ label }}</th>
                    {% endif %}
                {% endfor %}
                {% if action %}
                    <th>{{ 'ali.common.action'|trans() }}</th>
                {% endif %}
            </tr>
            </thead>
            {% if search %}
            {% set i = 0 %}
            <tfoot>
            <tr>
                {% if multiple %}
                <th></th>
                {% endif %}
                {% for label,key in fields %}
                    {% if label != '_identifier_' %}
                        {% if search_fields is not empty %}
                            {% if i in search_fields %}
                            <td><input index="{{i}}" searchable="true" type="text" placeholder="{{ 'ali.common.search'|trans() }}" class="form-control input-sm search_init" /></td>
                            {% else %}
                            <td></td>
                            {% endif %}
                        {% else %}
                        <td><input index="{{i}}" searchable="true" type="text" placeholder="{{ 'ali.common.search'|trans() }}" class="form-control input-sm search_init" /></td>
                        {% endif %}
                    {% elseif label == '_identifier_'and action and not action_twig %}
                        <td></td>
                    {% endif %}
                    {% set i = i+1 %}
                {% endfor %}
            </tr>
            </tfoot>
            {% endif %}
        </table>
    </div>
{% if multiple %}
</form>
{% endif %}
{% endblock  %}
